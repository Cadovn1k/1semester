package Miner;

import java.util.Scanner;

public class Field {

    static Scanner inp;

    private String lvl;

    private int n;

    private int m;

    private int k;

    private int act;

    private int nn;

    private int mm;

    private Character[][] field;


    public int getN() {

        return n;

    }


    public void setN(int n) {

        this.n = n;

    }


    public int getM() {

        return m;

    }


    public void setM(int m) {

        this.m = m;

    }


    public int getK() {

        return k;

    }


    public void setK(int k) {

        this.k = k;

    }


    public int getAct() {

        return act;

    }


    public Field() {

    }


    public void setAct(int act) {

        this.act = act;

    }


    public Character[][] getField() {

        return field;

    }


    public void setField(Character[][] field) {

        this.field = field;

    }


    public String getLvl() {

        return lvl;

    }


    public void setLvl(String lvl) {

        this.lvl = lvl;

    }

    public int getNn() {
        return nn;
    }

    public void setNn(int nn) {
        this.nn = nn;
    }

    public int getMm() {
        return mm;
    }

    public void setMm(int mm) {
        this.mm = mm;
    }

    public void size() {

        inp = new Scanner(System.in);

        System.out.println("Выберите сложность игры : новичок, любитель или профи");

        this.lvl = inp.next();

        if (getLvl().equalsIgnoreCase("новичок")) {

            this.n = 9;

            this.m = 9;

            this.k = 10;

        }

        if (getLvl().equalsIgnoreCase("любитель")) {

            this.n = 16;

            this.m = 16;

            this.k = 40;

        }

        if (getLvl().equalsIgnoreCase("профи")) {

            this.n = 16;

            this.m = 30;

            this.k = 99;

        }

    }


    public void gamefield() {

        this.field = new Character[getN()][getM()];

        for (int i = 0; i < field.length; i++) {

            for (int j = 0; j < field[i].length; j++) {

                field[i][j] = 'X';

            }

        }

        for (int i = 0; i < k; i++) {

            int n1 = (int) (Math.random() * n);

            int m1 = (int) (Math.random() * m);

            if (field[n1][m1].equals("X"))

                field[n1][m1] = '*';

            else {

                while (field[n1][m1].equals("*")) {

                    n1 = (int) (Math.random() * n);

                    m1 = (int) (Math.random() * m);

                }

                field[n1][m1] = '*';

            }

        }

    }


    public void actions() {

        inp = new Scanner(System.in);

        System.out.println("Выберите действие : ");

        System.out.println("0 - закончить игру");

        System.out.println("1 - отметить мину");

        System.out.println("2 - открыть мину");

        this.act = inp.nextInt();

        while (getAct() != 0) {
            thegame();

        }

    }

    public void thegame() {

        inp = new Scanner(System.in);

        Character[][] nullfield = new Character[getN()][getM()];

        for (int i = 0; i < nullfield.length; i++) {

            for (int j = 0; j < nullfield[i].length; j++) {

                nullfield[i][j] = 'X';

            }

        }

        switch (getAct()) {

            case 1: {

                System.out.print("Введите № строки = ");

                this.nn = inp.nextInt();

                System.out.print("Введите № столбца = ");

                this.mm = inp.nextInt();

                nullfield[getNn()][getMm()] = '!';

            }

            break;

            case 2: {

                System.out.print("Введите № строки = ");

                this.nn = inp.nextInt();

                System.out.print("Введите № столбца = ");

                this.mm = inp.nextInt();

                if (nullfield[getNn()][getMm()].equals("X")) {
                    
                    cells();

                    if (cells() == 0) {


                    }

                    if (cells() != 0)
                        nullfield[nn][mm] = (char)cells();
                }

                if (nullfield[nn][mm].equals("*"))

                    System.out.println("ВЫ ПРОИГРАЛИ");

            }

        }

    }

    public int cells(){
        int cells = 0;
        if (getNn() > 1 && getNn() < getN() && getMm() > 1 && getMm() < getM()) {

            for (int i = getNn() - 1; i < getNn() + 1; i++) {

                for (int j = getMm() - 1; j < getMm() + 1; j++) {

                    if (field[i][j] == '*')

                        cells++;

                }

            }

        }

        if (getNn() == 1 && getMm() > 1 && getMm() < getM()) {

            for (int i = getNn(); i < getNn() + 1; i++) {

                for (int j = getMm() - 1; j < getMm() + 1; j++) {

                    if (field[i][j] == '*')

                        cells++;

                }

            }

        }
        if (getNn() == 1 && getMm() == getM()) {

            for (int i = getNn(); i < getNn() + 1; i++) {

                for (int j = getMm() - 1; j < getMm(); j++) {

                    if (field[i][j] == '*')

                        cells++;

                }

            }

        }

        if (getNn() == 1 && getMm() == 1) {

            for (int i = getNn(); i < getNn() + 1; i++) {

                for (int j = getMm(); j < getMm() + 1; j++) {

                    if (field[i][j] == '*')

                        cells++;

                }

            }

        }
        if (getNn() == getN() && getMm() == getM()) {

            for (int i = getNn() - 1; i < getNn(); i++) {

                for (int j = getMm() - 1; j < getMm(); j++) {

                    if (field[i][j] == '*')

                        cells++;

                }

            }

        }
        if (getMm() == 1 && getNn() > 1 && getNn() < getN()) {

            for (int i = getNn() - 1; i < getNn() + 1; i++) {

                for (int j = getMm(); j < getMm() + 1; j++) {

                    if (field[i][j] == '*')

                        cells++;

                }

            }

        }
        if (getNn() == getN() && getMm() > 1 && getMm() < getM()) {

            for (int i = getNn() - 1; i < getNn(); i++) {

                for (int j = getMm() - 1; j < getMm() + 1; j++) {

                    if (field[i][j] == '*')

                        cells++;

                }

            }

        }
        if (getMm() == getM() && getNn() > 1 && getNn() < getN()) {

            for (int i = getNn() - 1; i < getNn() + 1; i++) {

                for (int j = getMm() - 1; j < getMm(); j++) {

                    if (field[i][j] == '*')

                        cells++;

                }

            }

        }
        if (getMm() == 1 && getNn() == getN()) {

            for (int i = getNn() - 1; i < getNn(); i++) {

                for (int j = getMm(); j < getMm() + 1; j++) {

                    if (field[i][j] == '*')

                        cells++;

                }

            }

        }
        return cells;
    }

}
